# -*- coding: utf-8 -*-
"""Proyek_Klasifikasi SVM Kanker Payudara.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDnYbifCGRmz3M8YGBP7VY5VSopIRdWh

# Import Library
"""

# Impor library yang dibutuhkan
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization

import joblib
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""# Import and Describe Data"""

# Memuat data dari file Excel
from google.colab import drive
drive.mount('/content/gdrive')
a = '/content/gdrive/My Drive/Colab Notebooks/Breast_cancer_data.csv'
df = pd.read_csv(a)
df.head()

df.info()

# check the distribution of the target variable
df['diagnosis'].value_counts()

"""*   The target variable is diagnosis. It contains 2 values - 0 and 1.
*   0 is for Negative prediction and 1 for Positive prediction.
*   We can see that the problem is binary classification task.

# Pembagian Data
"""

# Pisahkan fitur (X) dan target (y)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Bagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Model Prediction"""

# Buat model SVM
model = SVC(kernel='linear') # Anda dapat mencoba kernel lain seperti 'rbf'

# Latih model dengan data latih
model.fit(X_train, y_train)

# Prediksi pada data uji
y_pred = model.predict(X_test)

y_pred_train = model.predict(X_train)

"""# Accuracy Model"""

# view accuracy
accuracy=accuracy_score(y_pred, y_test)
print('SVM Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))

print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))

# print the scores on training and test set

print('Training set score: {:.4f}'.format(model.score(X_train, y_train)))

print('Test set score: {:.4f}'.format(model.score(X_test, y_test)))

"""*   Akurasi set pelatihan dan pengujian cukup sebanding. Jadi, kita tidak dapat mengatakan ada overfitting.

*   The training and test set accuracy are quite comparable. So, we cannot say there is overfitting.

# Convusion-Matrix
"""

# view confusion-matrix
# Print the Confusion Matrix and slice it into four pieces

cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix\n\n', cm)
print('\nTrue Positives(TP) = ', cm[0,0])
print('\nTrue Negatives(TN) = ', cm[1,1])
print('\nFalse Positives(FP) = ', cm[0,1])
print('\nFalse Negatives(FN) = ', cm[1,0])

"""# Visualisasi Confusion Matrix"""

# visualize confusion matrix with seaborn heatmap

cm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'],
                                 index=['Predict Positive:1', 'Predict Negative:0'])

sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')

print(classification_report(y_test, y_pred))

"""# Sistem Prediksi"""

from google.colab import drive
drive.mount('/content/drive') # Mount your Google Drive
model_path = '/content/drive/My Drive/Colab Notebooks/svm_model.pkl'  # Ganti dengan path yang Anda inginkan

joblib.dump(model, model_path)

import numpy as np # linear algebra
import ipywidgets as widgets
from IPython.display import display

def predict_diagnosis(mean_radius, mean_texture, mean_perimeter, mean_area, mean_smoothness):

    input_data = np.array([mean_radius, mean_texture, mean_perimeter, mean_area, mean_smoothness]).reshape(1, -1)

    prediction = model.predict(input_data)[0]

    if prediction == 0:
        return "Negative"
    else:
        return "Positive"

# Buat elemen-elemen GUI
mean_radius = widgets.FloatText(description="mean_radius:", style={'description_width': '150px'})
mean_texture = widgets.FloatText(description="mean_texture:", style={'description_width': '150px'})
mean_perimeter = widgets.FloatText(description="mean_perimeter:", style={'description_width': '150px'})
mean_area = widgets.FloatText(description="mean_area:", style={'description_width': '150px'})
mean_smoothness = widgets.FloatText(description="mean_smoothness:", style={'description_width': '150px'})
predict_button = widgets.Button(description="Prediksi", style={'button_color': 'lightgreen'})
output_label = widgets.Label(style={'font_size': '16px'})

# Atur fungsi yang akan dijalankan saat tombol ditekan
def on_button_clicked(b):
    input_data = [mean_radius.value, mean_texture.value, mean_perimeter.value, mean_area.value, mean_smoothness.value] # Ambil nilai dari elemen GUI
    prediction = predict_diagnosis(*input_data)
    output_label.value = f"Hasil prediksi: {prediction}"

predict_button.on_click(on_button_clicked)

# Tampilkan elemen-elemen GUI
display(mean_radius, mean_texture, mean_perimeter, mean_area, mean_smoothness, predict_button, output_label)